[tool.poetry]
name = "quranbot"
version = "1.0.0"
description = "A feature-rich Discord bot serving as an Islamic companion with Quran recitations, AI assistance, and Islamic knowledge"
authors = ["حَـــــنَّـــــا"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/trippixn963/QuranBot"
repository = "https://github.com/trippixn963/QuranBot"
documentation = "https://github.com/trippixn963/QuranBot"
keywords = ["discord", "bot", "quran", "islamic", "audio"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Religion",
]

[tool.poetry.dependencies]
python = "^3.11"
# Discord Bot Framework
"discord.py" = "^2.4.0"
# Async File Operations
aiofiles = "^24.1.0"
# Time Zone Support
pytz = "^2024.1"
# HTTP Requests
requests = "^2.31.0"
# Async HTTP Requests
aiohttp = "^3.9.0"
# Environment Variables
python-dotenv = "^1.0.1"
# OpenAI API for Islamic AI Assistant
openai = "^1.0.0"
# Backup and Compression
py7zr = "^0.21.0"
zipfile-deflate64 = "^0.2.0"
# Audio Processing
pynacl = "^1.5.0"
# Scheduling
schedule = "^1.2.0"
# Rich Text Processing
rich = "^13.7.1"
# Audio File Processing
mutagen = "^1.47.0"
psutil = "^5.9.0"
# Modern Configuration Management
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
# Redis for distributed caching
redis = "^5.0.0"
# Prometheus metrics
prometheus-client = "^0.19.0"

[tool.poetry.group.dev.dependencies]
# Code Formatting
black = "^24.0.0"
# Linting and Code Quality
ruff = "^0.1.0"
# Type Checking
mypy = "^1.8.0"
# Testing Framework
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
# Pre-commit Hooks
pre-commit = "^3.6.0"

[tool.poetry.scripts]
quranbot = "main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# Code Quality Tools Configuration
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude common directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | audio
  | backup
  | web
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "logs",
    "audio",
    "backup",
    "web",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "mutagen.*",
    "schedule.*",
    "psutil.*",
    "zipfile_deflate64.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=80"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/logs/*",
    "*/audio/*",
    "*/backup/*",
    "*/web/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert statements in tests

[tool.bandit.assert_used]
skips = ["*/test_*.py"]