[tool.poetry]
name = "quranbot"
version = "3.0.0"
description = "A feature-rich Discord bot serving as an Islamic companion with Quran recitations, AI assistance, and Islamic knowledge"
authors = ["حَـــــنَّـــــا"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/trippixn963/QuranBot"
repository = "https://github.com/trippixn963/QuranBot"
documentation = "https://github.com/trippixn963/QuranBot"
keywords = ["discord", "bot", "quran", "islamic", "audio"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Religion",
]

[tool.poetry.dependencies]
python = "^3.11"
# Discord Bot Framework
"discord.py" = "^2.4.0"
# Async File Operations
aiofiles = "^24.1.0"
# Time Zone Support
pytz = "^2024.1"
# HTTP Requests
requests = "^2.31.0"
# Async HTTP Requests
aiohttp = "^3.9.0"
# Environment Variables
python-dotenv = "^1.0.1"
# OpenAI API for Islamic AI Assistant
openai = "^1.0.0"
# Backup and Compression
py7zr = "^0.21.0"
zipfile-deflate64 = "^0.2.0"
# Audio Processing
pynacl = "^1.5.0"
# Scheduling
schedule = "^1.2.0"
# Rich Text Processing
rich = "^13.7.1"
# Audio File Processing
mutagen = "^1.47.0"
psutil = "^5.9.0"
# Modern Configuration Management
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
# Redis for distributed caching
redis = "^5.0.0"
# Prometheus metrics
prometheus-client = "^0.19.0"

[tool.poetry.group.dev.dependencies]
# Code Formatting
black = "^24.0.0"
# Linting and Code Quality
ruff = "^0.1.0"
# Type Checking
mypy = "^1.8.0"
# Testing Framework
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.12.0"
# Pre-commit Hooks
pre-commit = "^3.6.0"

[tool.poetry.scripts]
quranbot = "main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Code Quality Tools Configuration
#
# Comprehensive configuration for Python code quality tools ensuring consistent
# formatting, linting, and style enforcement across the QuranBot codebase.
#
# Tools Configured:
# - Black: Uncompromising Python code formatter for consistent style
# - Ruff: Fast Python linter combining multiple tools (flake8, isort, etc.)
# - MyPy: Static type checker for type safety and documentation
#
# Philosophy:
# - Consistency over personal preference in code formatting
# - Comprehensive linting to catch bugs and improve code quality
# - Type safety to prevent runtime errors and improve maintainability
# - Performance-oriented tool selection for fast development workflow

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude common directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | audio
  | backup
  | web
)/
'''

[tool.ruff]
# Ruff Configuration - Fast Python Linter and Code Quality Tool
# Combines multiple linting tools into one fast, comprehensive checker.
# Configured for Discord bot development with focus on reliability and maintainability.

target-version = "py311"  # Target Python version for rule compatibility - matches Black
line-length = 88          # Match Black's line length for consistency

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "logs",
    "audio",
    "backup",
    "web",
]

[tool.ruff.lint]
# Selected Rule Categories
# Comprehensive rule set covering common bugs, style issues, and best practices
select = [
    "E",   # pycodestyle errors - PEP 8 compliance
    "W",   # pycodestyle warnings - style warnings
    "F",   # pyflakes - logical errors and unused imports
    "I",   # isort - import sorting and organization
    "B",   # flake8-bugbear - common bug patterns
    "C4",  # flake8-comprehensions - list/dict comprehension improvements
    "UP",  # pyupgrade - modern Python syntax upgrades
    "ARG", # flake8-unused-arguments - unused function arguments
    "SIM", # flake8-simplify - code simplification suggestions
    "TCH", # flake8-type-checking - type checking improvements
    "PTH", # flake8-use-pathlib - pathlib usage over os.path
    "ERA", # eradicate - commented-out code detection
    "PL",  # pylint - comprehensive code analysis
    "RUF", # ruff-specific rules - additional quality checks
]

# Ignored Rules
# Rules disabled for Discord bot development or handled by other tools
ignore = [
    "E501",    # line too long - handled by Black formatter
    "B008",    # function calls in argument defaults - common in Discord.py
    "B904",    # exception chaining - temporarily disabled for large refactor
    "C901",    # too complex - acceptable for bot command handlers
    "PLR0913", # too many arguments - common in Discord bot callbacks
    "PLR0912", # too many branches - acceptable for command parsing
    "PLR0915", # too many statements - acceptable for bot initialization
    "PLR0911", # too many return statements - acceptable for error handling
    "PLR2004", # magic value used in comparison - common in Discord bots
    "PLR0124", # name compared with itself - acceptable for NaN checks
    "ERA001",  # commented-out code - temporary for development
    "E722",    # bare except - acceptable for Discord.py error handling
    "E402",    # module import not at top - needed for specific cases
    "W293",    # blank line contains whitespace - cosmetic
    "SIM105",  # contextlib.suppress - not always preferred
    "SIM102",  # nested if - sometimes clearer
    "PLC0415", # import not at top - needed for circular import avoidance
    "B007",    # loop control variable not used - acceptable pattern
    "PLW2901", # loop variable overwritten - acceptable in service registration
    "RUF022",  # __all__ not sorted - keep logical order
    "RUF006",  # asyncio.create_task - not always needed to store
    "SIM103",  # return condition directly - not always clearer
    "ARG001",  # unused function argument - needed for interface compatibility
    "ARG002",  # unused method argument - needed for interface compatibility
    "F841",    # local variable assigned but never used - placeholder vars
    "F601",    # dictionary key repeated - may be intentional
    "C401",    # generator to comprehension - sometimes clearer as is
    "UP035",   # typing.Dict - keeping for backward compatibility
    "UP038",   # isinstance with tuple - keeping existing style
    "SIM118",  # dict.keys() - sometimes clearer
    "F401",    # unused import - may be used conditionally
    "F821",    # undefined name - may be defined conditionally
    "PLW0603", # global statement - needed for singleton pattern
    "PLW0602", # global without assignment - pattern in use
    "RUF013",  # implicit optional - acceptable for now
    "PTH",     # pathlib - keeping os.path for compatibility
    "SIM108",  # ternary operator - not always clearer
    "RUF012",  # class var - keeping existing pattern
    "D100",    # missing module docstring - TODO
    "D212",    # docstring format - TODO
    "D415",    # docstring punctuation - TODO
    "RUF005",  # list concatenation - keeping existing pattern
    "W291",    # trailing whitespace - will be cleaned up
    "PLR1730", # if statement optimization - not always clearer
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
# Black-compatible settings
combine-as-imports = true
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "mutagen.*",
    "schedule.*",
    "psutil.*",
    "zipfile_deflate64.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=80"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/logs/*",
    "*/audio/*",
    "*/backup/*",
    "*/web/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert statements in tests

[tool.bandit.assert_used]
skips = ["*/test_*.py"]
