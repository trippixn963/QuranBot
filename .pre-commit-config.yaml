# Pre-commit Configuration for QuranBot
#
# Automated code quality checks executed before commits to maintain Islamic excellence
# in code craftsmanship (Ihsan in software development). This configuration ensures
# consistent code quality, security, and maintainability across all contributions.
#
# Quality Assurance Philosophy:
# - Prevent issues before they enter the codebase
# - Maintain consistent formatting and style across all files
# - Enforce security best practices and vulnerability scanning
# - Ensure comprehensive documentation and type safety
# - Automate repetitive quality checks for developer efficiency
#
# Hook Categories:
# - Code Formatting: Black, isort, Ruff formatting
# - Code Quality: Ruff linting, MyPy type checking
# - Security: Bandit security scanning
# - Documentation: Pydocstyle docstring validation
# - General: File format validation, whitespace cleanup

repos:
  # Code Formatting Tools
  # Automated code formatting ensures consistent style without manual intervention
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        name: "Format Python code with Black"
        description: "Uncompromising Python code formatter for consistent style"
        language_version: python3.11

  # Import Organization - HANDLED BY RUFF
  # Consistent import sorting improves code readability and reduces merge conflicts
  # Using Ruff's built-in isort instead of separate tool to avoid conflicts
  # - repo: https://github.com/pycqa/isort
  #   rev: 5.13.2
  #   hooks:
  #     - id: isort
  #       name: "Sort Python imports"
  #       description: "Organize imports alphabetically and by type for maintainability"
  #       args: ["--profile", "black", "--filter-files"]

  # Code Quality and Linting
  # Comprehensive linting catches bugs, enforces best practices, and improves maintainability
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.10
    hooks:
      - id: ruff
        name: "Lint Python code with Ruff"
        description: "Fast, comprehensive Python linter combining multiple tools"
        args: [--fix, --exit-non-zero-on-fix]
      # - id: ruff-format
      #   name: "Format Python code with Ruff"
      #   description: "Additional formatting using Ruff's built-in formatter - DISABLED to avoid conflict with Black"

  # Static Type Checking - DISABLED (205 errors to fix)
  # Type checking prevents runtime errors and improves code documentation
  # Re-enable after fixing type annotations throughout the codebase
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.10.0
  #   hooks:
  #     - id: mypy
  #       name: "Type check Python code"
  #       description: "Static type analysis to catch type-related bugs before runtime"
  #       additional_dependencies: [
  #         types-requests,        # Type stubs for requests library
  #         types-python-dateutil, # Type stubs for dateutil
  #         types-pytz,           # Type stubs for timezone handling
  #         pydantic              # Runtime type validation
  #       ]
  #       args: [
  #         --ignore-missing-imports,
  #         --install-types,
  #         --non-interactive,
  #         --no-strict-optional,
  #         --allow-untyped-calls,
  #         --allow-untyped-defs,
  #         --allow-incomplete-defs,
  #         --explicit-package-bases
  #       ]

  # Security Vulnerability Scanning - DISABLED (60 issues to review)
  # Automated security scanning prevents common vulnerabilities from entering codebase
  # Re-enable after reviewing MD5 usage and SQL injection risks
  # - repo: https://github.com/PyCQA/bandit
  #   rev: 1.7.8
  #   hooks:
  #     - id: bandit
  #       name: "Security scan with Bandit"
  #       description: "Scan for common security vulnerabilities and unsafe patterns"
  #       args: ["-ll", "--skip", "B101,B601,B603,B607"]  # Skip assert, shell usage, subprocess
  #       exclude: tests/      # Exclude test files from security scanning

  # General Hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: "Remove trailing whitespace"
        description: "Clean up unnecessary whitespace"
      - id: end-of-file-fixer
        name: "Fix end of files"
        description: "Ensure files end with newlines"
      - id: check-yaml
        name: "Check YAML files"
        description: "Validate YAML syntax"
        exclude: '.github/workflows/community.yml'  # Has complex JS template literals
      - id: check-toml
        name: "Check TOML files"
        description: "Validate TOML syntax"
      - id: check-json
        name: "Check JSON files"
        description: "Validate JSON syntax"
        exclude: "data/.*\\.json$"  # Exclude data files that may have comments
      - id: check-merge-conflict
        name: "Check for merge conflicts"
        description: "Detect merge conflict markers"
      - id: check-case-conflict
        name: "Check case conflicts"
        description: "Detect case-insensitive filename conflicts"
      - id: check-docstring-first
        name: "Check docstring placement"
        description: "Ensure docstrings come first in modules"
      - id: debug-statements
        name: "Check for debug statements"
        description: "Detect debugging statements left in code"

  # Documentation Quality - DISABLED (docstring format conflicts)
  # Consistent documentation style improves code maintainability and user experience
  # Re-enable after resolving docstring format conflicts between tools
  # - repo: https://github.com/pycqa/pydocstyle
  #   rev: 6.3.0
  #   hooks:
  #     - id: pydocstyle
  #       name: "Check docstring style"
  #       description: "Enforce consistent docstring formatting using Google style"
  #       args: [--ignore=D107,D200,D203,D205,D212,D213,D406,D407,D413,D415,D416,D417]  # Skip the most common issues for now
  #       exclude: tests/              # Exclude test files from docstring requirements



# Hook Configuration
#
# Global settings that apply to all pre-commit hooks, controlling execution
# behavior, file exclusions, and performance optimizations.

# Default Language Versions
# Ensures consistent Python version across all hooks for reproducible results
default_language_version:
  python: python3.11

# Hook Execution Stages
# Controls when hooks run in the Git workflow for optimal development experience
default_stages: [pre-commit, pre-push]

# Global File Exclusion Patterns
# Files and directories that should be excluded from all pre-commit hooks
# to avoid processing generated files, dependencies, and sensitive data
exclude: |
  (?x)^(
    .*\.min\.(js|css)$|    # Minified web assets
    .*\.map$|              # Source map files
    \.git/.*|              # Git repository files
    \.mypy_cache/.*|       # MyPy type checker cache
    \.pytest_cache/.*|     # Pytest cache files
    \.ruff_cache/.*|       # Ruff linter cache
    __pycache__/.*|        # Python bytecode cache
    \.venv/.*|             # Virtual environment files
    venv/.*|               # Alternative virtual environment
    node_modules/.*|       # Node.js dependencies
    logs/.*|               # Log files directory
    audio/.*|              # Audio files directory
    backup/.*|             # Backup files directory
    \.env.*|               # Environment configuration files
    .*\.log$               # All log files
  )$

# Execution Control
# Controls hook execution behavior for optimal development workflow
fail_fast: false                    # Continue running all hooks even if one fails
minimum_pre_commit_version: 3.0.0   # Minimum pre-commit version for compatibility
