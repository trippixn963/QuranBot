# =============================================================================
# QuranBot Continuous Integration & Quality Assurance
# =============================================================================
# Comprehensive CI/CD pipeline ensuring Islamic excellence (Ihsan) in code quality,
# testing, and deployment while serving the Muslim community with reliability.
# =============================================================================

name: üïå QuranBot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'images/**'
      - 'audio/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'images/**'
      - 'audio/**'
  schedule:
    # Run tests daily at 5 AM UTC (after Fajr in many timezones)
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  NODE_VERSION: '18'

# Ensure only one workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Code Quality & Linting
  # =============================================================================
  quality-checks:
    name: üîç Code Quality & Islamic Content Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: üîß Load Cached Dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

    - name: üìö Install Dependencies
      run: |
        poetry install --no-interaction --no-ansi
        poetry run pip install pre-commit

    - name: üé® Code Formatting Check (Black)
      run: |
        poetry run black --check --diff src/ tests/
        echo "‚úÖ Code formatting follows Islamic principles of order and beauty"

    - name: üîç Linting (Ruff)
      run: |
        poetry run ruff check src/ tests/ --output-format=github
        echo "‚úÖ Code quality meets excellence standards (Ihsan)"

    - name: üè∑Ô∏è Type Checking (MyPy)
      run: |
        poetry run mypy src/ --show-error-codes --pretty
        echo "‚úÖ Type safety ensures reliable service to the community"

    - name: üõ°Ô∏è Security Scan (Bandit)
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run bandit -r src/ -f txt
        echo "‚úÖ Security scan protects our Islamic community"

    - name: üïå Islamic Content Validation
      run: |
        python scripts/validate_islamic_content.py data/complete_quiz_questions.json data/daily_verses_pool.json
        echo "‚úÖ Islamic content validated for accuracy and respect"

    - name: ‚öôÔ∏è Configuration Validation
      run: |
        python scripts/validate_config.py config/.env.example pyproject.toml
        echo "‚úÖ Configuration files validated for completeness"

    - name: üìä Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 30

  # =============================================================================
  # Comprehensive Testing
  # =============================================================================
  tests:
    name: üß™ Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-suite: ['unit', 'integration', 'security']

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true  # For audio file testing

    - name: üêç Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: üéµ Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        ffmpeg -version

    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: üìö Install Dependencies
      run: |
        poetry install --no-interaction --no-ansi --with dev

    - name: üèóÔ∏è Create Test Environment
      run: |
        mkdir -p test_data/audio/test_reciter
        echo "mock audio" > test_data/audio/test_reciter/001.mp3
        mkdir -p test_data/logs test_data/backup

    - name: üß™ Run Unit Tests
      if: matrix.test-suite == 'unit'
      run: |
        poetry run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=test-results-unit.xml \
          -k "not integration and not security_comprehensive"

    - name: üîó Run Integration Tests
      if: matrix.test-suite == 'integration'
      env:
        REDIS_URL: redis://localhost:6379
      run: |
        poetry run pytest tests/test_integration*.py -v \
          --cov=src \
          --cov-report=xml \
          --junitxml=test-results-integration.xml \
          --timeout=300

    - name: üõ°Ô∏è Run Security Tests
      if: matrix.test-suite == 'security'
      run: |
        poetry run pytest tests/test_security*.py -v \
          --cov=src \
          --cov-report=xml \
          --junitxml=test-results-security.xml \
          --timeout=180

    - name: üìä Upload Coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: ${{ matrix.test-suite }}
        name: QuranBot-${{ matrix.test-suite }}
        fail_ci_if_error: false

    - name: üìã Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-suite }}
        path: |
          test-results-*.xml
          htmlcov/
          coverage.xml
        retention-days: 30

  # =============================================================================
  # Performance & Load Testing
  # =============================================================================
  performance-tests:
    name: ‚ö° Performance & Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks]

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Install Dependencies
      run: |
        pip install poetry
        poetry install --no-interaction --no-ansi

    - name: ‚ö° Memory Usage Test
      run: |
        poetry run python -c "
        import psutil
        import gc
        from src.core.di_container import DIContainer

        # Test memory efficiency
        process = psutil.Process()
        initial_memory = process.memory_info().rss / (1024 * 1024)  # MB

        # Create multiple containers to test memory usage
        containers = [DIContainer() for _ in range(100)]

        final_memory = process.memory_info().rss / (1024 * 1024)  # MB
        memory_per_container = (final_memory - initial_memory) / 100

        print(f'Memory per container: {memory_per_container:.2f} MB')
        print(f'Total memory usage: {final_memory:.2f} MB')

        # Should not exceed reasonable limits
        assert memory_per_container < 1.0, f'Memory usage too high: {memory_per_container:.2f} MB per container'
        print('‚úÖ Memory usage within acceptable limits')
        "

    - name: üîÑ Concurrency Test
      run: |
        poetry run python -c "
        import asyncio
        import time
        from src.core.cache_service import CacheService, CacheStrategy

        async def test_concurrent_operations():
            cache = CacheService(CacheStrategy.LRU, 1000, 300)
            await cache.initialize()

            async def worker(worker_id, operations):
                for i in range(operations):
                    key = f'worker_{worker_id}_key_{i}'
                    await cache.set(key, f'value_{i}')
                    value = await cache.get(key)
                    assert value == f'value_{i}'

            # Test with multiple concurrent workers
            start_time = time.time()
            tasks = [worker(i, 50) for i in range(10)]
            await asyncio.gather(*tasks)
            end_time = time.time()

            total_ops = 10 * 50 * 2  # workers * operations * (set + get)
            ops_per_second = total_ops / (end_time - start_time)

            print(f'Operations per second: {ops_per_second:.2f}')
            assert ops_per_second > 1000, f'Performance too low: {ops_per_second:.2f} ops/sec'
            print('‚úÖ Concurrency performance meets requirements')

            await cache.shutdown()

        asyncio.run(test_concurrent_operations())
        "

  # =============================================================================
  # Docker Build & Security Scan
  # =============================================================================
  docker-build:
    name: üê≥ Docker Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks]

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üèóÔ∏è Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          quranbot:latest
          quranbot:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: üîç Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'quranbot:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: üìä Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Documentation & API Validation
  # =============================================================================
  documentation:
    name: üìö Documentation & API Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üìñ Validate Documentation Links
      run: |
        # Check for broken internal links
        find . -name "*.md" -exec grep -l "]\(" {} \; | while read file; do
          echo "Checking links in $file"
          grep -o "]\([^)]*\)" "$file" | sed 's/](\(.*\))/\1/' | while read link; do
            # Skip external links and anchors
            if [[ $link =~ ^https?:// ]] || [[ $link =~ ^# ]]; then
              continue
            fi
            # Check if local file exists
            if [[ -f "$link" ]] || [[ -d "$link" ]]; then
              echo "‚úÖ $link exists"
            else
              echo "‚ùå Broken link: $link in $file"
              exit 1
            fi
          done
        done

    - name: üìã Check README Completeness
      run: |
        # Ensure README has essential sections
        required_sections=(
          "# " "## Features" "## Installation" "## Usage"
          "## Contributing" "## License" "discord.gg/syria"
        )

        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "‚úÖ Found section: $section"
          else
            echo "‚ùå Missing section: $section"
            exit 1
          fi
        done

    - name: üïå Validate Islamic Content References
      run: |
        python -c "
        import re
        import json
        from pathlib import Path

        # Check Quran references format
        def validate_quran_reference(ref):
            pattern = r'^(Quran|Qur\'an) \d{1,3}:\d{1,3}$'
            return re.match(pattern, ref) is not None

        # Scan documentation for Quran references
        for md_file in Path('.').glob('**/*.md'):
            content = md_file.read_text()
            refs = re.findall(r'(Quran|Qur\'an) \d{1,3}:\d{1,3}', content)
            for ref in refs:
                if validate_quran_reference(ref):
                    print(f'‚úÖ Valid reference: {ref} in {md_file}')
                else:
                    print(f'‚ùå Invalid reference: {ref} in {md_file}')
                    exit(1)

        print('‚úÖ All Quranic references validated')
        "

  # =============================================================================
  # Deployment (if on main branch)
  # =============================================================================
  deploy:
    name: üöÄ Deploy to Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [tests, docker-build, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: ${{ github.event.inputs.deploy_environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üîß Setup Deployment Environment
      run: |
        echo "Setting up deployment for ${{ github.event.inputs.deploy_environment || 'staging' }}"
        # Add deployment-specific setup here

    - name: üöÄ Deploy Application
      id: deploy
      run: |
        echo "üïå Deploying QuranBot with Barakah (blessing)..."
        # Add actual deployment commands here
        echo "url=https://staging.quranbot.example.com" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment completed successfully!"

    - name: üîî Notify Discord Community
      if: success()
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"üïå **QuranBot Deployment Successful** üéâ\n\n‚úÖ Environment: ${{ github.event.inputs.deploy_environment || 'staging' }}\n‚úÖ Commit: \`${{ github.sha }}\`\n‚úÖ Branch: \`${{ github.ref_name }}\`\n\nÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑŸá (Alhamdulillahi Rabbil Alameen)\"}" \
               "$DISCORD_WEBHOOK"
        fi

  # =============================================================================
  # Notification & Cleanup
  # =============================================================================
  notify-results:
    name: üì¢ Notify Results
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, performance-tests, docker-build, documentation]
    if: always()

    steps:
    - name: üìä Collect Results
      run: |
        echo "## üïå QuranBot CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.quality-checks.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.tests.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance-tests.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.documentation.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_\"And Allah loves those who do good with excellence (ihsan).\"_ - **Quran 2:195**" >> $GITHUB_STEP_SUMMARY

# =============================================================================
# Workflow Completion
# =============================================================================
# This comprehensive CI/CD pipeline ensures that QuranBot maintains the highest
# standards of quality, security, and reliability while serving the Islamic
# community with excellence (Ihsan).
#
# May Allah (SWT) bless this project and make it beneficial for the Muslim
# community worldwide. Every commit is a step toward better service to the Ummah.
# =============================================================================
